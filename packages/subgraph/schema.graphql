"""
Project factory represents a factory contract that is used for creating new project smart contracts
"""
type ProjectFactory @entity(immutable: true) {
    """
    Investment Pool Factory address
    Example: 0x1234567890abcdef1234567890abcdef1234567890
    """
    id: ID!

    """
    List of all projects that were created by this factory
    """
    projects: [Project!]! @derivedFrom(field: "factory")

    """
    The maximum number of milestones that can be created for a project
    """
    maxMilesonesCount: Int!

    """
    Time, in which creator will be able to terminate stream.
    This window starts before milestone ends and it ends exactly at milestone end
    Specified in seconds
    """
    terminationWindow: BigInt!

    """
    Minimum duration that milestone can have
    Specified in seconds
    """
    minMilestoneDuration: BigInt!

    """
    Maximum duration that milestone can have
    Specified in seconds
    """
    maxMilestoneDuration: BigInt!

    """
    Minimum duration that fundraiser can have
    Specified in seconds
    """
    minFundraiserDuration: BigInt!

    """
    Maximum duration that fundraiser can have
    Specified in seconds
    """
    maxFundraiserDuration: BigInt!
}

"""
Project entity represents project (investment pool) that was created by a creator
"""
type Project @entity {
    """
    Investment Pool address
    Example: 0x1234567890abcdef1234567890abcdef1234567890
    """
    id: ID!

    """
    Project factory entity that was used for creating this project
    """
    factory: ProjectFactory!

    """
    Investments that were made to this project by the investors
    """
    projectInvestments: [ProjectInvestment!]! @derivedFrom(field: "project")

    """
    Wallet address of the project creator
    """
    creator: Bytes!

    """
    The minimum amount of funds that needs be invested in the project, for the project to be considered as funded
    Specified in wei [10^18 ETH]
    """
    softCap: BigInt!

    """
    The maximum amount of funds that can be invested in the project
    Specified in wei [10^18 ETH]
    """
    hardCap: BigInt!

    """
    Value that represents if total invested is more (or equal) to soft cap
    """
    isSoftCapReached: Boolean!

    """
    The amount of funds that was invested in the project so far
    Specified in wei [10^18 ETH]
    """
    totalInvested: BigInt!

    """
    Multiplier that is used for calculating investment weight and voting power UNTIL soft cap is reached
    """
    softCapMultiplier: Int!

    """
    Multiplier that is used for calculating investment weight and voting power AFTER soft cap is reached
    """
    hardCapMultiplier: Int!

    """
    The maximum weight divisor that is used for calculating investment weight and voting power
    This number represents the 100% of weight
    """
    maximumWeightDivisor: BigInt!

    """
    Governance Pool entity reponsible for voting process
    """
    governancePool: GovernancePool!

    """
    Distribution Pool entity reponsible for distribution of rewards
    """
    distributionPool: DistributionPool!

    # Milestones are not derived from Milestone entity
    # It is more efficient to have them stored directly on the Project entity
    # as we will need to loop through all milestones when updating milestone details
    """
    List of milestones
    """
    milestones: [Milestone!]!

    """
    The amount of milestones that the project has in total
    """
    milestonesCount: Int!

    """
    Current active milestone
    """
    currentMilestone: Milestone!

    """
    Timestamp when the fundraiser starts
    Specified in seconds
    """
    fundraiserStartTime: BigInt!

    """
    Timestamp when the fundraiser ends
    Specified in seconds
    """
    fundraiserEndTime: BigInt!

    """
    Duration from the first milestone start to the last milestone end
    Specified in seconds
    """
    duration: BigInt!

    """
    Token that is used for getting the investments from the investors
    These tokens are transferred to the investment pool on investment
    """
    acceptedToken: AcceptedSuperToken!

    """
    Holds the number that is used as dividor to calculate the seed and stream allocation funds
    This number represents the 100% of portion
    """
    percentageDivider: BigInt!

    """
    Number of unique investors that invested in the project
    """
    investorsCount: Int!

    """
    Is project canceled before the fundraiser start
    """
    isCanceledBeforeFundraiserStart: Boolean!

    """
    Is project canceled during the milestone period
    """
    isCanceledDuringMilestones: Boolean!

    """
    Timestamp when the project was canceled or treminated
    """
    emergencyTerminationTime: BigInt!

    """
    Is project canceled or terminated
    """
    isEmergencyTerminated: Boolean!

    """
    True if project is active OR was terminated by voting
    False if project was terminated by gelato
    """
    isTerminatedByGelato: Boolean!

    """
    Percentage of investors investment that is going to be left in the investment pool as a fee from the investor
    If invstor invests, but later on wants to cancel his investment, he will be charged with this fee
    Specified in percentage [0.00-100.00]
    """
    investmentCancelationPercentageFee: BigDecimal!
}

"""
Governance entity represents governance pool, which is responsible for voting process
"""
type GovernancePool @entity {
    """
    Governance Pool address
    Example: 0x1234567890abcdef1234567890abcdef1234567890
    """
    id: ID!

    """
    Project that this governance pool belongs to
    """
    project: Project!

    """
    Voting token id that is used for voting
    """
    votingToken: VotingToken!

    """
    Votes that were casted by the investors against the project
    Specified in wei [10^18 ETH]
    """
    totalVotesAgainst: BigInt!

    """
    Percentage of votes that were casted by the investors against the project
    Specified in percentage [0.00-100.00]
    """
    totalPercentageAgainst: BigDecimal!

    """
    Percentage of votes that are required for the project to be considered as failed
    Specified in percentage [0.00-100.00]
    """
    votesPercentageThreshold: BigDecimal!

    """
    Percentage of investors votes that is going to be left in the governance pool as a fee from the investors votes
    If investor votes against the project, but later on wants to retract the vote, the fee will be deducted from the vote
    Specified in percentage [0.00-100.00]
    """
    votesWithdrawalPercentageFee: BigDecimal!
}

"""
DistributionPool entity represents distribution pool, which is responsible for distribution of rewards
"""
type DistributionPool @entity {
    """
    Distribution Pool address
    Example: 0x1234567890abcdef1234567890abcdef1234567890
    """
    id: ID!

    """
    Project that this distribution pool belongs to
    """
    project: Project!

    """
    Project token that is used for distribution of rewards
    """
    projectToken: ProjectToken!

    """
    The amount of tokens that was locked in the distribution pool by the project creator and
    will be distributed to the investors as rewards
    Specified in wei [10^18 ETH]
    """
    lockedTokensForRewards: BigInt!

    """
    Did the creator transferred the tokens to distribution pool and locked them for rewards
    """
    didCreatorLockTokens: Boolean!

    """
    The amount of project tokens that is allocated for the investors as rewards
    Tokens are going to be unlocked during the project duration
    Specified in wei [10^18 ETH]
    """
    totalAllocatedTokens: BigInt!
}

"""
Milestone entity represents a single milestone of a project
"""
type Milestone @entity {
    """
    Unique ID for all milestone entities
    Combination of the investment pool address and milestoneId value separated by dash
    Example: 0x1234567890abcdef1234567890abcdef1234567890-1
    """
    id: ID!

    # TODO: decide if we want to store the project address here
    """
    The project that this milestone belongs to
    """
    project: Project!

    """
    The milestone ID for the project
    """
    milestoneId: Int!

    """
    Timestamp when the milestone starts
    Specified in seconds
    """
    startTime: BigInt!

    """
    Timestamp when the milestone ends
    Specified in seconds
    """
    endTime: BigInt!

    """
    Duration from the start to the end of the milestone
    Specified in seconds
    """
    duration: BigInt!

    """
    The amount of funds that will be transferred to the creator on milestone start.
    Specified in wei [10^18 ETH]
    """
    seedFundsAllocation: BigInt!

    """
    The amount of funds that will be transferred to the creator throughout this milestone.
    Specified in wei [10^18 ETH]
    """
    streamFundsAllocation: BigInt!

    """
    Portion of funds transferred for creator on milestone start.
    Represents the percentage part, where percentage divider is 100%
    """
    seedPercentagePortion: BigInt!

    """
    Portion of funds transferred for creator throughout this milestone.
    Represents the percentage part, where percentage divider is 100%
    """
    streamPercentagePortion: BigInt!

    """
    Describes if seed allocation was transferred for the creator
    """
    isSeedAllocationPaid: Boolean!

    """
    Describes if total allocation was transferred for the creator
    """
    isTotalAllocationPaid: Boolean!

    """
    Describes if stream for the creator is currently opened
    """
    isStreamOngoing: Boolean!

    """
    Amount of funds that was transferred for the creator.
    If stream is opened and active, this value will not change on every seconds.
    Only after the stream is closed, this value will be updated.
    """
    paidAmount: BigInt!
}

"""
Investor entity represents a single investor, who can invest in multiple projects
"""
type Investor @entity {
    """
    Investor address
    example: 0x1234567890abcdef1234567890abcdef1234567890
    """
    id: ID!

    projectInvestments: [ProjectInvestment!]! @derivedFrom(field: "investor")
}

"""
ProjectInvestment entity represents a full investment combined from all single investments of a single investor in a single project
"""
type ProjectInvestment @entity {
    """
    Combination of the investment pool address and investor address separated by dash
    Example: 0x1234567890abcdef1234567890abcdef1234567890-0x1234567890abcdef1234567890abcdef1234567890
    """
    id: ID!

    """
    Investor, who invested in the project
    """
    investor: Investor!

    """
    Project that the investor invested in
    """
    project: Project!

    """
    Amount of funds that was invested by the investor
    Specified in wei [10^18 ETH]
    """
    investedAmount: BigInt!

    """
    Amount of tokens that is allocated for the investor
    This amount will be fully available for the investor after the project is finished
    Specified in wei [10^18 ETH]
    """
    allocatedProjectTokens: BigInt!

    """
    Amount of project tokens that were already claimed by the investor
    Specified in wei [10^18 ETH]
    """
    claimedProjectTokens: BigInt!

    """
    Votes that were casted by the investor against the project
    Specified in wei [10^18 ETH]
    """
    votesAgainst: BigInt!

    """
    All single investments that belong to this full investment
    """
    singleInvestments: [SingleInvestment!]! @derivedFrom(field: "projectInvestment")

    """
    Number of single investments that belong to this full investment
    """
    singleInvestmentsCount: Int!
}

"""
SingleInvestment entity represents a single investment of a single investor in a single project
"""
type SingleInvestment @entity {
    """
    Combination of the investment pool address, investor address and investment ID separated by dash
    Example: 0x1234567890abcdef1234567890abcdef1234567890-0x1234567890abcdef1234567890abcdef1234567890-1
    """
    id: ID!

    """
    Investor, who invested in the project
    """
    investor: Investor!

    """
    Investment Id, which is number of investments made by the investor in the project - 1
    Starts from 0
    """
    investmentId: Int!

    """
    Full investment that this single investment belongs to
    """
    projectInvestment: ProjectInvestment!

    """
    Milestone that this investment was made for
    """
    milestone: Milestone!

    """
    Transaction hash of the investment
    """
    transactionHash: Bytes!

    """
    Amount of funds that was invested by the investor
    Specified in wei [10^18 ETH]
    """
    investedAmount: BigInt!
}

"""
SuperToken that is accepted by the project as investment
"""
type AcceptedSuperToken @entity(immutable: true) {
    """
    Super token address
    Example: 0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a
    """
    id: ID!

    """
    Token symbol
    Example: fUSDCx
    """
    symbol: String!

    """
    Token name
    Example: Super fUSDC Fake Token (fUSDCx)
    """
    name: String!

    """
    Token decimals
    Example: 18
    """
    decimals: Int!
}

"""
ERC20 project token that is used as rewards for the project investors
"""
type ProjectToken @entity(immutable: true) {
    """
    ERC20 token address
    Example: 0x4090edE451b5Fe11AfCC1d823aED08EE8A60a73D
    """
    id: ID!

    """
    Token symbol
    Example: BDL1
    """
    symbol: String!

    """
    Token name
    Example: Buidl1
    """
    name: String!

    """
    Token decimals
    Example: 18
    """
    decimals: Int!
}

"""
ERC1155 token that is used as votes for the project governance
"""
type VotingToken @entity {
    """
    ERC1155 token id that is investment pool address converted to a number
    Example below is 0x1234567890abcdef1234567890abcdef1234567890 address converted to a strigified number
    Example: 26605825358829505721434779085324195740956759586960
    """
    id: ID!

    """
    Id of the governancePool entity that this voting token belongs to
    """
    governancePool: GovernancePool!

    """
    Address of the voting token contract
    """
    address: Bytes!

    """
    The current number of tokens that have been minted and are in circulation
    Specified in wei [10^18 ETH]
    """
    currentSupply: BigInt!

    """
    The maximum number of tokens that can be minted if the project is successful and reaches the hard cap
    Specified in wei [10^18 ETH]
    """
    supplyCap: BigInt!
}
